h📋 INSTRUCTIVO COMPLETO: CHATBOT DANTE PROPIEDADES
🎯 DESCRIPCIÓN GENERAL
Chatbot especializado en inmobiliaria con capacidad de respuestas generales, desplegado en producción 24/7.

🌐 ARQUITECTURA VISUAL DEL SISTEMA
text
CHATBOT_DANTE_PROPIEDADES/
├── 🐍 BACKEND_PYTHON/
│   ├── main.py                 # 🚀 Servidor FastAPI principal
│   ├── config.py              # 🔑 Configuración API Keys Gemini
│   ├── requirements.txt       # 📦 Dependencias Python
│   ├── properties.json        # 🏠 Base de datos de propiedades
│   └── tests/
│       ├── test_simpl.py      # 🧪 Test básico
│       ├── test_propiedades.py # 🏠 Test inmobiliario
│       └── test_velocidad.py  # ⏱️ Test rendimiento
├── 🌐 FRONTEND_WEB/
│   ├── index.html            # 🏗️ Página principal
│   ├── config.js             # ⚙️ Configuración URLs
│   ├── script.js             # 🧠 Lógica del chat
│   └── styles.css            # 🎨 Estilos
└── 🔄 AUTOMATIZACION/
    └── .github/workflows/
        └── keep-alive.yml    # ⏰ Keep-alive automático
📁 CONTENIDO DETALLADO DE ARCHIVOS
🐍 BACKEND - main.py
python
# SERVIDOR FASTAPI PRINCIPAL
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
import requests
import json
import os

app = FastAPI()

# Configuración CORS
app.add_middleware(CORSMiddleware, allow_origins=["*"])

@app.post("/chat")
async def chat_endpoint(request: Request):
    """Endpoint principal del chatbot"""
    data = await request.json()
    mensaje = data.get("message", "")
    
    # Lógica de procesamiento con Gemini AI
    respuesta = procesar_mensaje(mensaje)
    
    return {
        "mensaje_recibido": mensaje,
        "respuesta_bot": respuesta
    }

@app.get("/")
def root():
    return {"status": "Backend activo", "endpoint": "/chat"}
🔑 CONFIGURACIÓN - config.py
python
# CONFIGURACIÓN API KEYS Y MODELO GEMINI
import os
from dotenv import load_dotenv

load_dotenv()

# Claves API de Gemini
API_KEYS = ["AIzaSyCNHuDW5ytZwQzwy3og5ZxYBjV0Tc6oyLU"]

# Modelo de IA
WORKING_MODEL = "gemini-2.0-flash-001"
ENDPOINT = f"https://generativelanguage.googleapis.com/v1beta/models/{WORKING_MODEL}:generateContent"
📦 DEPENDENCIAS - requirements.txt
text
fastapi==0.104.1
uvicorn==0.24.0
requests==2.31.0
python-dotenv==1.0.0
python-multipart==0.0.6
🏠 BASE DE DATOS - properties.json
json
[
  {
    "id": 1,
    "tipo": "Departamento",
    "ubicacion": "Palermo",
    "precio": 150000,
    "dormitorios": 2,
    "amueblada": true,
    "disponible": true
  },
  {
    "id": 2,
    "tipo": "Casa", 
    "ubicacion": "Belgrano",
    "precio": 280000,
    "dormitorios": 3,
    "amueblada": false,
    "disponible": true
  }
]
🧪 TEST - test_simpl.py
python
# TEST BÁSICO DEL CHATBOT
import requests

def test_basico():
    response = requests.post(
        "http://127.0.0.1:8000/chat",
        json={"message": "Hola", "channel": "web"}
    )
    
    if response.status_code == 200:
        data = response.json()
        print(f"✅ Respuesta: {data.get('respuesta_bot')}")
🌐 FRONTEND - config.js
javascript
// CONFIGURACIÓN DEL FRONTEND
const CONFIG = {
    API_URL: 'https://chatgpt-eio1.onrender.com/chat',
    UI: {
        botName: 'Asistente Dante Propiedades',
        botAvatar: '🏠',
        userAvatar: '👤'
    }
};
🧠 LÓGICA - script.js
javascript
// LÓGICA PRINCIPAL DEL CHAT
class DanteChatbot {
    async sendMessage(message) {
        const response = await fetch(CONFIG.API_URL, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({message: message, channel: 'web'})
        });
        
        const data = await response.json();
        return data.respuesta_bot;
    }
}
🏗️ PÁGINA - index.html
html
<!DOCTYPE html>
<html>
<head>
    <title>Chatbot Dante Propiedades</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="chat-container">
        <h1>🏠 Dante Propiedades</h1>
        <div id="chat-box"></div>
        <input type="text" id="user-input" placeholder="Escribe tu mensaje...">
        <button onclick="sendMessage()">Enviar</button>
    </div>
    
    <script src="config.js"></script>
    <script src="script.js"></script>
</body>
</html>
⏰ AUTOMATIZACIÓN - keep-alive.yml
yaml
# GITHUB ACTIONS - KEEP ALIVE
name: Keep Render Alive
on:
  schedule:
    - cron: '*/5 * * * *'  # Cada 5 minutos

jobs:
  ping-render:
    runs-on: ubuntu-latest
    steps:
      - name: Ping Render Service
        run: |
          curl -X GET "https://chatgpt-eio1.onrender.com"
🔄 FLUJO DE DATOS
text
USUARIO → [Frontend GitHub Pages] → [Backend Render] → [Gemini AI] → RESPUESTA
     ↓
 [properties.json] → Datos locales de propiedades
     ↓
 [GitHub Actions] → Keep-alive automático
🚀 URLS DE PRODUCCIÓN
Frontend (Cliente):
text
https://dantearona-collab.github.io/CHATGPT/
Backend (Servidor):
text
https://chatgpt-eio1.onrender.com
API Endpoints:
GET / - Health check

POST /chat - Enviar mensajes al chatbot

⚙️ COMANDOS DE OPERACIÓN
Iniciar servidor local:
bash
cd C:\Users\artar\Downloads\CHATGPT
python main.py
Ejecutar tests:
bash
python test_simpl.py
python test_propiedades.py
Actualizar producción:
bash
git add .
git commit -m "Descripción cambios"
git push origin main
# Render se actualiza automáticamente en 2-5 min
📊 MONITOREO
Render Dashboard:
text
https://dashboard.render.com
GitHub Actions:
text
https://github.com/dantearona-collab/CHATGPT/actions
GitHub Pages:
text
https://github.com/dantearona-collab/CHATGPT/settings/pages
¿Necesitas que detalle más algún archivo específico o flujo particular?

